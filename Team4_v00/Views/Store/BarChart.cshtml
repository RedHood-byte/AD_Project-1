@{
    var history = (List<UsageHistory>)ViewData["histories"];
    var count = history.Count;
}

@*<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script>
        google.charts.load('current', {packages: ['corechart', 'bar']});
    google.charts.setOnLoadCallback(drawAnnotations);

        function drawAnnotations() {
            var data = new google.visualization.DataTable();
            data.addColumn('timeofday', 'Time of Day');
            @for(var i = 0; i < history.Count; i++)
                {
                    <text> data.addColumn('number', '@history[@i].Department.DeptName');</text>
                    <text> data.addColumn({ type: 'string', role: 'annotation' });</text>
            };

            data.addRows([

                [{ v: [8, 0, 0], f: '8 am' }, 1, '1', .25, '.2', .25, '.2'],
              [{ v: [9, 0, 0], f: '9 am' }, 2, '2', .5, '.5', .25, '.2'],
              [{ v: [10, 0, 0], f: '10 am' }, 3, '3', 1, '1', .25, '.2'],
              [{ v: [11, 0, 0], f: '11 am' }, 4, '4', 2.25, '2', .25, '.2'],
              [{ v: [12, 0, 0], f: '12 pm' }, 5, '5', 2.25, '2', .25, '.2'],
              [{ v: [13, 0, 0], f: '1 pm' }, 6, '6', 3, '3', .25, '.2'],
              [{ v: [14, 0, 0], f: '2 pm' }, 7, '7', 3.25, '3', .25, '.2'],
              [{ v: [15, 0, 0], f: '3 pm' }, 8, '8', 5, '5', .25, '.2'],
              [{ v: [16, 0, 0], f: '4 pm' }, 9, '9', 6.5, '6', .25, '.2'],
              [{ v: [17, 0, 0], f: '5 pm' }, 10, '10', 10, '10', .25, '.2'],
          ]);

          var options = {
            title: 'Motivation and Energy Level Throughout the Day',
            annotations: {
              alwaysOutside: true,
              textStyle: {
                fontSize: 14,
                color: '#000',
                auraColor: 'none'
              }
            },
            hAxis: {
              title: 'Time of Day',
              format: 'h:mm a',
              viewWindow: {
                min: [7, 30, 0],
                max: [17, 30, 0]
              }
            },
            vAxis: {
              title: 'Rating (scale of 1-10)'
            }
          };

          var chart = new google.visualization.ColumnChart(document.getElementById('chart_div'));
          chart.draw(data, options);
        }
    </script>
    <div id="chart_div"></div>-->*@
<form asp-controller="Store" asp-action="BarChart" method="post">
    <table align="center">
        <tr>
            <td>Item Category:</td>
            <td>
                <input id="item_category" name="item_category" value="@ViewData["item_category"]" />

            </td>
        </tr>
        <tr>
            <td>Item ID:</td>
            <td><input id="item_ID" name="item_ID" value="@ViewData["item_ID"]" /></td>
        </tr>

        <tr>
            <td>Date:</td>
            <td>
                <input id="date" name="date" type="date" value="@ViewData["date"]" />
            </td>
        </tr>

        <tr>
            <td>IsHoliday?( write true or false only):</td>
            <td>
                <input id="IsHoliday" name="IsHoliday" type="radio" value="true" />
                "true  &nbsp;&nbsp;"
                <input id="IsHoliday" name="IsHoliday" type="radio" value="false" />
                "false"
            </td>
        </tr>

        <tr>
            <td colspan="2" align="right">
                <input id="PredictBtn" type="submit" value="Prediction" />
            </td>
        </tr>
    </table>
</form>

<html>
<head>
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript">

                // Load the Visualization API and the controls package.
                google.charts.load('current', { 'packages': ['corechart', 'controls'] });

                // Set a callback to run when the Google Visualization API is loaded.
                google.charts.setOnLoadCallback(drawDashboard);

                // Callback that creates and populates a data table,
                // instantiates a dashboard, a range slider and a pie chart,
                // passes in the data and draws it.
            function drawDashboard() {

                    // Create our data table.
                var data = google.visualization.arrayToDataTable([
                    ['DeptName', 'Qty'],
                    @for (var i = 0; i < history.Count-1 ; i++)
                     {
                        <text>['@history[@i].Department.DeptName @history[@i].A_Date.ToString("yyyyMMMM")',@history[@i].Qty ],</text>
                         }
                    ['@history[history.Count-1].Department.DeptName @history[history.Count-1].A_Date.ToString("yyyyMMMM")',@history[history.Count-1].Qty]
                    ]);


                    // Create our data table.
                    @*var data = google.visualization.arrayToDataTable([
                        ['DeptName', 'Qty'],
                        ['@history[0].Department.DeptName', @history[0].Qty],
                        ['@history[1].Department.DeptName',@history[1].Qty ],
                        ['@history[2].Department.DeptName',@history[2].Qty]
                        ]);*@

                    // Create a dashboard.
                    var dashboard = new google.visualization.Dashboard(
                        document.getElementById('dashboard_div'));

                    // Create a range slider, passing some options
                    var donutRangeSlider = new google.visualization.ControlWrapper({
                        'controlType': 'NumberRangeFilter',
                        'containerId': 'filter_div',
                        'options': {
                            'filterColumnLabel': 'Qty'
                        }
                    });

                    // Create a pie chart, passing some options
                    var pieChart = new google.visualization.ChartWrapper({
                        'chartType': 'BarChart',
                        'containerId': 'chart_div',
                        'options': {
                            'width': 3000,
                            'height': 1000,
                            'pieSliceText': 'value',
                            'legend': 'right'
                        }
                    });

                    // Establish dependencies, declaring that 'filter' drives 'pieChart',
                    // so that the pie chart will only display entries that are let through
                    // given the chosen slider range.
                dashboard.bind(donutRangeSlider,pieChart);

                    // Draw the dashboard.
                    dashboard.draw(data);
                }
    </script>
</head>

<body>

    <div id="dashboard_div">

        <div id="filter_div"></div>
        <div id="chart_div"></div>
    </div>
</body>
</html>

